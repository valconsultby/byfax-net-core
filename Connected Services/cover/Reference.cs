//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace cover
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:ApiServiceCover", ConfigurationName="cover.ApiServiceCoverSoap")]
    public interface ApiServiceCoverSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="#addCover", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(FaxCover))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        cover.ApiResponseCoverUpload addCover(string title, cover.FaxFile file);
        
        [System.ServiceModel.OperationContractAttribute(Action="#addCover", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<cover.ApiResponseCoverUpload> addCoverAsync(string title, cover.FaxFile file);
        
        [System.ServiceModel.OperationContractAttribute(Action="#downloadCover", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(FaxCover))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        cover.ApiResponseFileDownload downloadCover(string coverRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="#downloadCover", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<cover.ApiResponseFileDownload> downloadCoverAsync(string coverRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="#getCover", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(FaxCover))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        cover.ApiResponseListCovers getCover(string coverRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="#getCover", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<cover.ApiResponseListCovers> getCoverAsync(string coverRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="#listCovers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(FaxCover))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        cover.ApiResponseListCovers listCovers();
        
        [System.ServiceModel.OperationContractAttribute(Action="#listCovers", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<cover.ApiResponseListCovers> listCoversAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="#renameCover", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(FaxCover))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        cover.ApiResponse renameCover(string coverRef, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="#renameCover", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<cover.ApiResponse> renameCoverAsync(string coverRef, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="#reloadCover", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(FaxCover))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        cover.ApiResponse reloadCover(string coverRef, cover.FaxFile file);
        
        [System.ServiceModel.OperationContractAttribute(Action="#reloadCover", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<cover.ApiResponse> reloadCoverAsync(string coverRef, cover.FaxFile file);
        
        [System.ServiceModel.OperationContractAttribute(Action="#deleteCover", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(FaxCover))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        cover.ApiResponse deleteCover(string coverRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="#deleteCover", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<cover.ApiResponse> deleteCoverAsync(string coverRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="#getCoverPreview", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(FaxCover))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        cover.ApiResponseFileDownload getCoverPreview(string coverRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="#getCoverPreview", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<cover.ApiResponseFileDownload> getCoverPreviewAsync(string coverRef);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceCover")]
    public partial class UsernameToken
    {
        
        private string usernameField;
        
        private string passwordField;
        
        /// <remarks/>
        public string Username
        {
            get
            {
                return this.usernameField;
            }
            set
            {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public string Password
        {
            get
            {
                return this.passwordField;
            }
            set
            {
                this.passwordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceCover")]
    public partial class FaxCover
    {
        
        private string coverRefField;
        
        private string coverTitleField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string coverRef
        {
            get
            {
                return this.coverRefField;
            }
            set
            {
                this.coverRefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string coverTitle
        {
            get
            {
                return this.coverTitleField;
            }
            set
            {
                this.coverTitleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(ApiResponseCoverUpload))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(ApiResponseListCovers))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(ApiResponseFileDownload))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceCover")]
    public partial class ApiResponse
    {
        
        private StateCodes stateCodeField;
        
        private string stateMessageField;
        
        /// <remarks/>
        public StateCodes stateCode
        {
            get
            {
                return this.stateCodeField;
            }
            set
            {
                this.stateCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string stateMessage
        {
            get
            {
                return this.stateMessageField;
            }
            set
            {
                this.stateMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceCover")]
    public enum StateCodes
    {
        
        /// <remarks/>
        SUCCESS,
        
        /// <remarks/>
        API_FUNCTION_MISSING,
        
        /// <remarks/>
        API_FUNCTION_UNKNOWN,
        
        /// <remarks/>
        API_FUNCTION_ACCESS_DENIED,
        
        /// <remarks/>
        API_AGENT_MISSING,
        
        /// <remarks/>
        API_AGENT_NOT_FOUND,
        
        /// <remarks/>
        API_AGENT_DEACTIVATED,
        
        /// <remarks/>
        API_AGENT_KEY_NOT_MATCH,
        
        /// <remarks/>
        API_CUSTOMER_MISSING,
        
        /// <remarks/>
        API_CUSTOMER_NOT_FOUND,
        
        /// <remarks/>
        API_CUSTOMER_DEACTIVATED,
        
        /// <remarks/>
        API_CUSTOMER_KEY_NOT_MATCH,
        
        /// <remarks/>
        API_CUSTOMER_FEATURE_ACCESS_DENIED,
        
        /// <remarks/>
        API_KEY_MISSING,
        
        /// <remarks/>
        API_KEY_NOT_FOUND,
        
        /// <remarks/>
        API_KEY_DEACTIVATED,
        
        /// <remarks/>
        API_KEY_SECRET_NOT_MATCH,
        
        /// <remarks/>
        API_REQUEST_INCOMPLETE,
        
        /// <remarks/>
        API_REQUEST_FAILURE,
        
        /// <remarks/>
        API_REQUEST_VALIDATE,
        
        /// <remarks/>
        FILE_NOT_FOUND,
        
        /// <remarks/>
        FILE_DELETED,
        
        /// <remarks/>
        FILE_ACCESS_DENIED,
        
        /// <remarks/>
        FILE_STORAGE_MISSING,
        
        /// <remarks/>
        FILE_STORAGE_SIZE_MISMATCH,
        
        /// <remarks/>
        FILE_STORAGE_READ_ERROR,
        
        /// <remarks/>
        FILE_EXISTS,
        
        /// <remarks/>
        CUSTOMER_DELETED,
        
        /// <remarks/>
        CUSTOMER_NOT_CONFIRMED,
        
        /// <remarks/>
        CUSTOMER_BLOCKED,
        
        /// <remarks/>
        CUSTOMER_INACTIVE,
        
        /// <remarks/>
        CUSTOMER_WRONG_PASSWORD,
        
        /// <remarks/>
        CUSTOMER_PASSWORD_NOT_MATCH,
        
        /// <remarks/>
        CUSTOMER_CURRENT_PASSWORD_NOT_MATCH,
        
        /// <remarks/>
        CUSTOMER_EMAIL_IN_USE,
        
        /// <remarks/>
        CUSTOMER_SOCIAL_IN_USE,
        
        /// <remarks/>
        FILE_REFERENCE_DUPLICATE,
        
        /// <remarks/>
        FILE_STORAGE_COPY,
        
        /// <remarks/>
        FILE_INTEGRITY_FAILURE,
        
        /// <remarks/>
        FILE_FORMAT_UNSUPPORTED,
        
        /// <remarks/>
        FILE_FORMAT_EXCEPTION,
        
        /// <remarks/>
        FILE_FORMAT_UNKNOWN,
        
        /// <remarks/>
        FILE_DOWNLOAD_ERROR,
        
        /// <remarks/>
        FILE_VALIDATE_ERROR,
        
        /// <remarks/>
        FILE_OPEN_ERROR,
        
        /// <remarks/>
        FILE_THUMB_ERROR,
        
        /// <remarks/>
        DATABASE_RECORD_SAVE,
        
        /// <remarks/>
        DATABASE_QUERY_EXECUTE,
        
        /// <remarks/>
        DATABASE_QUERY_RESULT_SAVE,
        
        /// <remarks/>
        NUMBER_COUNTRY_UNKNOWN,
        
        /// <remarks/>
        NUMBER_NO_DIALING_RULE,
        
        /// <remarks/>
        NUMBER_NO_PRICE_RULE,
        
        /// <remarks/>
        COUNTRY_WRONG_ISO2,
        
        /// <remarks/>
        COUNTRY_NOT_SUPPORTED,
        
        /// <remarks/>
        COUNTRY_NO_ROUTE,
        
        /// <remarks/>
        EMPTY_RESULT,
        
        /// <remarks/>
        NUMBER_BLOCKED,
        
        /// <remarks/>
        NUMBER_UNOBTAINABLE,
        
        /// <remarks/>
        UNALLOCATED_NUMBER,
        
        /// <remarks/>
        INVALID_NUMBER,
        
        /// <remarks/>
        NUMBER_UNSUPPORTED,
        
        /// <remarks/>
        CALL_ABORTED,
        
        /// <remarks/>
        CALL_REJECTED,
        
        /// <remarks/>
        CALL_PLACE_ERROR,
        
        /// <remarks/>
        CALL_CREATE_ERROR,
        
        /// <remarks/>
        LINE_ATTACH,
        
        /// <remarks/>
        LINE_RESET,
        
        /// <remarks/>
        LINE_CAP_FAX,
        
        /// <remarks/>
        LINE_CAP_VOICE,
        
        /// <remarks/>
        LINE_SET_TSID,
        
        /// <remarks/>
        LINE_UNAUTHORIZED,
        
        /// <remarks/>
        LINE_REQUEST_TIMEOUT,
        
        /// <remarks/>
        DESTINATION_UNREACHIBLE,
        
        /// <remarks/>
        DIALING_ERROR,
        
        /// <remarks/>
        GATEWAY_TIMEOUT,
        
        /// <remarks/>
        ISDN_NETWORK_FAILURE,
        
        /// <remarks/>
        BUSY,
        
        /// <remarks/>
        NO_ANSWER,
        
        /// <remarks/>
        NO_DIAL_TONE,
        
        /// <remarks/>
        RECEIVER_INCOMPATIBLE,
        
        /// <remarks/>
        TEMPORARILY_UNAVAILABLE,
        
        /// <remarks/>
        TRANSMISSION_ABORTED,
        
        /// <remarks/>
        TRANSMISSION_EARLY_HANGUP,
        
        /// <remarks/>
        TRANSMISSION_ERROR,
        
        /// <remarks/>
        NEGOTIATION_FAILED,
        
        /// <remarks/>
        NOT_FAX_MACHINE,
        
        /// <remarks/>
        VOICE_ANSWER,
        
        /// <remarks/>
        DELIVERY_FAILURE,
        
        /// <remarks/>
        MESSAGE_REFERENCE_DUPLICATE,
        
        /// <remarks/>
        FAXJOB_NOT_FOUND,
        
        /// <remarks/>
        FAXJOB_NOT_FAILED,
        
        /// <remarks/>
        FAXJOB_NOT_WAITING,
        
        /// <remarks/>
        FAXTRANSPORT_NOT_FOUND,
        
        /// <remarks/>
        FAXTRANSPORT_NOT_WAITING,
        
        /// <remarks/>
        CONTAINER_EXISTS,
        
        /// <remarks/>
        CONTAINER_NOT_FOUND,
        
        /// <remarks/>
        CONTAINER_DELETED,
        
        /// <remarks/>
        CONTAINER_ACCESS_DENIED,
        
        /// <remarks/>
        CONTAINER_DOCUMENT_DUPLICATE,
        
        /// <remarks/>
        CONTAINER_PAGES_LIMIT_EXCEEDED,
        
        /// <remarks/>
        COVER_TEMPLATE_NOT_FOUND,
        
        /// <remarks/>
        COVER_TEMPLATE_DELETED,
        
        /// <remarks/>
        COVER_TEMPLATE_ACCESS_DENIED,
        
        /// <remarks/>
        FAXPRICE_NOT_FOUND,
        
        /// <remarks/>
        RESUBMIT_FAILED,
        
        /// <remarks/>
        DID_NUMBER_LOCKED,
        
        /// <remarks/>
        DID_SOURCE_NOT_FAXIN,
        
        /// <remarks/>
        DID_CUSTOMER_NOT_MATCH,
        
        /// <remarks/>
        DID_WRONG_FAXIN_STATE,
        
        /// <remarks/>
        DID_GROUP_NOT_CONNECTED,
        
        /// <remarks/>
        DID_EXTEND_TOO_EARLY,
        
        /// <remarks/>
        DID_ORDER_PENDING_ACTIVATION,
        
        /// <remarks/>
        FILE_PREVIEW_NOT_READY,
        
        /// <remarks/>
        FILE_CONVERTION_FAILED,
        
        /// <remarks/>
        FILE_PAGES_LIMIT_EXCEEDED,
        
        /// <remarks/>
        COMMON_EMAIL_SEND_ERROR,
        
        /// <remarks/>
        QUEUE_TASK_ABORTED,
        
        /// <remarks/>
        FILE_TIFF_DEPTH_VALIDATION,
        
        /// <remarks/>
        FILE_TIFF_FORMAT_VALIDATION,
        
        /// <remarks/>
        FILE_TIFF_QUALITY_VALIDATION,
        
        /// <remarks/>
        FILE_TIFF_PAGES_VALIDATION,
        
        /// <remarks/>
        FILE_TIFF_WIDTH_VALIDATION,
        
        /// <remarks/>
        FILE_TIFF_HEIGHT_VALIDATION,
        
        /// <remarks/>
        NUMBER_ADDRESS_NOT_REQUIRED,
        
        /// <remarks/>
        NUMBER_OUT_OF_STOCK,
        
        /// <remarks/>
        NUMBER_GROUP_NOT_AVAILABLE,
        
        /// <remarks/>
        NUMBER_ORDER_FAILURE,
        
        /// <remarks/>
        NUMBER_SETUP_FAILURE,
        
        /// <remarks/>
        NUMBER_ADDRESS_FAILURE,
        
        /// <remarks/>
        NUMBER_PROVIDER_NOT_RECOGNIZED,
        
        /// <remarks/>
        SESSION_TOKEN_MISMATCH,
        
        /// <remarks/>
        SESSION_NOT_FOUND,
        
        /// <remarks/>
        SESSION_EXPIRED,
        
        /// <remarks/>
        CONFIRM_TOKEN_NOT_FOUND,
        
        /// <remarks/>
        CONFIRM_TOKEN_TYPE_MISMATCH,
        
        /// <remarks/>
        CONFIRM_TOKEN_SOURCE_MISMATCH,
        
        /// <remarks/>
        CONFIRM_TOKEN_USER_MISMATCH,
        
        /// <remarks/>
        CONFIRM_TOKEN_EXPIRED,
        
        /// <remarks/>
        CONFIRM_TOKEN_VALIDATED,
        
        /// <remarks/>
        CONFIRM_TOKEN_INVALIDATED,
        
        /// <remarks/>
        CONFIRM_TOKEN_CLOSED,
        
        /// <remarks/>
        SEND_SMS_FREQUENCY_EXCEEDED,
        
        /// <remarks/>
        CONTACT_GROUP_IN_USE,
        
        /// <remarks/>
        CONTACT_GROUP_NOT_FOUND,
        
        /// <remarks/>
        CONTACT_GROUP_ACCESS_DENIED,
        
        /// <remarks/>
        CONTACT_ITEM_NOT_FOUND,
        
        /// <remarks/>
        CONTACT_ITEM_ACCESS_DENIED,
        
        /// <remarks/>
        CONTACT_NUMBER_IN_USE,
        
        /// <remarks/>
        NUMBER_ITEM_EXISTS,
        
        /// <remarks/>
        STORAGE_ALREADY_CONNECTED,
        
        /// <remarks/>
        STORAGE_REVOKE_FAILURE,
        
        /// <remarks/>
        STORAGE_NOT_CONNECTED,
        
        /// <remarks/>
        STORAGE_NOT_FOUND,
        
        /// <remarks/>
        INSUFFICIENT_FUNDS,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceCover")]
    public partial class ApiResponseCoverUpload : ApiResponse
    {
        
        private string coverRefField;
        
        private long fileSizeField;
        
        private bool fileSizeFieldSpecified;
        
        private string fileCheckField;
        
        private string fileMimeField;
        
        /// <remarks/>
        public string coverRef
        {
            get
            {
                return this.coverRefField;
            }
            set
            {
                this.coverRefField = value;
            }
        }
        
        /// <remarks/>
        public long fileSize
        {
            get
            {
                return this.fileSizeField;
            }
            set
            {
                this.fileSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool fileSizeSpecified
        {
            get
            {
                return this.fileSizeFieldSpecified;
            }
            set
            {
                this.fileSizeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string fileCheck
        {
            get
            {
                return this.fileCheckField;
            }
            set
            {
                this.fileCheckField = value;
            }
        }
        
        /// <remarks/>
        public string fileMime
        {
            get
            {
                return this.fileMimeField;
            }
            set
            {
                this.fileMimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceCover")]
    public partial class ApiResponseListCovers : ApiResponse
    {
        
        private int countResultField;
        
        private bool countResultFieldSpecified;
        
        private int countTotalField;
        
        private bool countTotalFieldSpecified;
        
        private FaxCover[] itemsField;
        
        /// <remarks/>
        public int countResult
        {
            get
            {
                return this.countResultField;
            }
            set
            {
                this.countResultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool countResultSpecified
        {
            get
            {
                return this.countResultFieldSpecified;
            }
            set
            {
                this.countResultFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int countTotal
        {
            get
            {
                return this.countTotalField;
            }
            set
            {
                this.countTotalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool countTotalSpecified
        {
            get
            {
                return this.countTotalFieldSpecified;
            }
            set
            {
                this.countTotalFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public FaxCover[] items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceCover")]
    public partial class ApiResponseFileDownload : ApiResponse
    {
        
        private FaxFile documentField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public FaxFile Document
        {
            get
            {
                return this.documentField;
            }
            set
            {
                this.documentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceCover")]
    public partial class FaxFile
    {
        
        private string fileNameField;
        
        private string fileMimeField;
        
        private long fileSizeField;
        
        private bool fileSizeFieldSpecified;
        
        private string fileCheckField;
        
        private byte[] fileDataField;
        
        /// <remarks/>
        public string fileName
        {
            get
            {
                return this.fileNameField;
            }
            set
            {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public string fileMime
        {
            get
            {
                return this.fileMimeField;
            }
            set
            {
                this.fileMimeField = value;
            }
        }
        
        /// <remarks/>
        public long fileSize
        {
            get
            {
                return this.fileSizeField;
            }
            set
            {
                this.fileSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool fileSizeSpecified
        {
            get
            {
                return this.fileSizeFieldSpecified;
            }
            set
            {
                this.fileSizeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string fileCheck
        {
            get
            {
                return this.fileCheckField;
            }
            set
            {
                this.fileCheckField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")]
        public byte[] fileData
        {
            get
            {
                return this.fileDataField;
            }
            set
            {
                this.fileDataField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface ApiServiceCoverSoapChannel : cover.ApiServiceCoverSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class ApiServiceCoverSoapClient : System.ServiceModel.ClientBase<cover.ApiServiceCoverSoap>, cover.ApiServiceCoverSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ApiServiceCoverSoapClient() : 
                base(ApiServiceCoverSoapClient.GetDefaultBinding(), ApiServiceCoverSoapClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.ApiServiceCoverSoap.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApiServiceCoverSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(ApiServiceCoverSoapClient.GetBindingForEndpoint(endpointConfiguration), ApiServiceCoverSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApiServiceCoverSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ApiServiceCoverSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApiServiceCoverSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ApiServiceCoverSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApiServiceCoverSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public cover.ApiResponseCoverUpload addCover(string title, cover.FaxFile file)
        {
            return base.Channel.addCover(title, file);
        }
        
        public System.Threading.Tasks.Task<cover.ApiResponseCoverUpload> addCoverAsync(string title, cover.FaxFile file)
        {
            return base.Channel.addCoverAsync(title, file);
        }
        
        public cover.ApiResponseFileDownload downloadCover(string coverRef)
        {
            return base.Channel.downloadCover(coverRef);
        }
        
        public System.Threading.Tasks.Task<cover.ApiResponseFileDownload> downloadCoverAsync(string coverRef)
        {
            return base.Channel.downloadCoverAsync(coverRef);
        }
        
        public cover.ApiResponseListCovers getCover(string coverRef)
        {
            return base.Channel.getCover(coverRef);
        }
        
        public System.Threading.Tasks.Task<cover.ApiResponseListCovers> getCoverAsync(string coverRef)
        {
            return base.Channel.getCoverAsync(coverRef);
        }
        
        public cover.ApiResponseListCovers listCovers()
        {
            return base.Channel.listCovers();
        }
        
        public System.Threading.Tasks.Task<cover.ApiResponseListCovers> listCoversAsync()
        {
            return base.Channel.listCoversAsync();
        }
        
        public cover.ApiResponse renameCover(string coverRef, string title)
        {
            return base.Channel.renameCover(coverRef, title);
        }
        
        public System.Threading.Tasks.Task<cover.ApiResponse> renameCoverAsync(string coverRef, string title)
        {
            return base.Channel.renameCoverAsync(coverRef, title);
        }
        
        public cover.ApiResponse reloadCover(string coverRef, cover.FaxFile file)
        {
            return base.Channel.reloadCover(coverRef, file);
        }
        
        public System.Threading.Tasks.Task<cover.ApiResponse> reloadCoverAsync(string coverRef, cover.FaxFile file)
        {
            return base.Channel.reloadCoverAsync(coverRef, file);
        }
        
        public cover.ApiResponse deleteCover(string coverRef)
        {
            return base.Channel.deleteCover(coverRef);
        }
        
        public System.Threading.Tasks.Task<cover.ApiResponse> deleteCoverAsync(string coverRef)
        {
            return base.Channel.deleteCoverAsync(coverRef);
        }
        
        public cover.ApiResponseFileDownload getCoverPreview(string coverRef)
        {
            return base.Channel.getCoverPreview(coverRef);
        }
        
        public System.Threading.Tasks.Task<cover.ApiResponseFileDownload> getCoverPreviewAsync(string coverRef)
        {
            return base.Channel.getCoverPreviewAsync(coverRef);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ApiServiceCoverSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ApiServiceCoverSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://api.byfax.biz/soap/1.1/cover");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ApiServiceCoverSoapClient.GetBindingForEndpoint(EndpointConfiguration.ApiServiceCoverSoap);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ApiServiceCoverSoapClient.GetEndpointAddress(EndpointConfiguration.ApiServiceCoverSoap);
        }
        
        public enum EndpointConfiguration
        {
            
            ApiServiceCoverSoap,
        }
    }
}
